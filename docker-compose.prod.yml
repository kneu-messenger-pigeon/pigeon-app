version: "3.9"
services:
  ### START section - kafka and related ##
  zookeeper:
    image: bitnami/zookeeper@sha256:1b7c881288972658c7721302111dd19fee6bfe8ea568245f35123a81531f01b4
    restart: always
    networks:
      - pigeon
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "bash", "-c", "unset", "JMX_PORT", ";", "kafka-topics.sh", "--zookeeper", "zookeeper:2181", "--list"]
      interval: 15s
      timeout: 5s
      retries: 5
  kafka:
    image: bitnami/kafka@sha256:b115471c8475bffeb9683039f276bfaae41d52c875a56407a961cf78f3d14517
    restart: always
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "/bitnami/kafka/healthcheck.sh"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 65s
  init-kafka:
    image: ghcr.io/kneu-messenger-pigeon/init-kafka@sha256:37d74cf11e042167ecc21994205c1945f5125eb1ca43df266219bd0d802a4d31
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_HOST=kafka:9092
      - CREATE_HEALTHCHECK_SCRIPT=/bitnami/kafka/healthcheck.sh
      # must be greater then services.kafka.healthcheck.interval (don't exit container until healthcheck done for Kafka service)
      - FINISH_TIMEOUT=16
    restart: on-failure
    depends_on:
      kafka:
        condition: service_started
  kafka-ui:
    image: provectuslabs/kafka-ui@sha256:477d4c3d896a0deefdcccf0e08e8fb0d4258e5340d34f3c3513f75073de5835c
    ports:
      - "8892:8080"
    networks:
      - pigeon
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "8080"]
      interval: 15s
      timeout: 5s
      retries: 3
  ### END section - kafka and related ##

  secondary-db-watcher:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-watcher@sha256:77ab21f46cf9f2737233e3c6969b32180a394e42848381ac3c27dea1af42a82a
    restart: always
    volumes:
      - "secondary-db-watcher-storage:/storage"
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      #      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
      - PAUSE_AFTER_SUCCESS=600
      - PAUSE_AFTER_ERROR=60
      - ERROR_COUNT_TO_BREAK=3
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### START section - secondary db importer ###
  secondary-db-disciplines-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-disciplines-importer@sha256:77acbcc0554d3bfc4a6f10ab9a0829bddaceb04716389067bb782148cfd1e2bb
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      #      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-lessons-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-lessons-importer@sha256:8fc7672ac773f415aaf5dc80e8e0d7ed39716b3f395cb79bab14b3c2d30fb56e
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      #      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-scores-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-scores-importer@sha256:391a3a350f37973311543ae3c1f367b9674a973f8cba64c495a09700f51f1285
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      #      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### END section - secondary db importer ###

  realtime-importer:
    image: ghcr.io/kneu-messenger-pigeon/realtime-importer@sha256:9f8ac357bac546a4aaeba3cdb3640192c354987402cd29fe7d55f02ee13988e3
    restart: always
    networks:
      - pigeon
    volumes:
      - "realtime-importer-storage:/storage"
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      #      - PRIMARY_DEKANAT_DB_DSN=${PRIMARY_DEKANAT_DB_DSN}
      #      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      #      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      #      - AWS_SQS_QUEUE_URL=${AWS_SQS_QUEUE_URL}
      #      - AWS_REGION=${AWS_REGION}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - score storage ###
  score-storage-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - score-storage-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  storage-writer:
    image: ghcr.io/kneu-messenger-pigeon/storage-writer@sha256:1bef3987c046a4c62ff96470dad910fb77dc56b67f9336894b911361f6bf52fa
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://score-storage-redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      score-storage-redis:
        condition: service_healthy
  score-storage-api:
    image: ghcr.io/kneu-messenger-pigeon/score-storage-api@sha256:e5974d51f438caf5592bc29a44ea26557f95b1a17283700522e25147aba08f65
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - REDIS_DSN=redis://score-storage-redis:6379
      - LISTEN=:80
    depends_on:
      score-storage-redis:
        condition: service_healthy
  ### END section - score storage ###

  authorizer:
    image: ghcr.io/kneu-messenger-pigeon/authorizer@sha256:87276ce1555fef66a18d593a386b36102e3500c7eead2e88f42d3baf40701de1
    restart: always
    ports:
      - "8890:80"
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - LISTEN=:80
      #      - PUBLIC_URL=${AUTHORIZER_PUBLIC_URL}
      #      - KNEU_CLIENT_ID=${KNEU_CLIENT_ID}
      #      - KNEU_CLIENT_SECRET=${KNEU_CLIENT_SECRET}
      #      - APP_SECRET=${APP_SECRET}
      #      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - telegram app ###
  telegram-app-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - telegram-app-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  telegram-app:
    image: ghcr.io/kneu-messenger-pigeon/telegram-app@sha256:3abcb88b3df359bcbc962e9183afa7505d101218593e49ae14df4da0ab77c1ec
    restart: always
    networks:
      - pigeon
    environment:
      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://telegram-app-redis:6379
      - SCORE_STORAGE_API_HOST=http://score-storage-api
      - AUTHORIZER_HOST=http://authorizer
      - COMMIT_THRESHOLD=1000
      #      - APP_SECRET=${APP_SECRET}
      #      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      #      - TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES=${TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES}
    depends_on:
      kafka:
        condition: service_healthy
      telegram-app-redis:
        condition: service_healthy
        ### END section - telegram app ###
volumes:
  secondary-db-watcher-storage:
    driver: local
  realtime-importer-storage:
    driver: local
  score-storage-redis:
    driver: local
  telegram-app-redis:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
networks:
  pigeon:
    driver: bridge
