version: "3.9"
services:
  # common nginx-gateway to have single public https-entrypoint for all services
  gateway:
    image: ghcr.io/kneu-messenger-pigeon/gateway@sha256:57ddfae3f61d4aa4456cc54a3ffa8ecc8ff21d06166bc9eb79591c933e9823bd
    restart: always
    networks:
      - pigeon
    ports:
      - "${LISTEN_HTTP:-28080}:80"
      - "${LISTEN_HTTPS:-28443}:443"
    environment:
      - SSL_FOLDER
    volumes:
      - type: bind
        source: ${SSL_VOLUME_PATH:-./ssl}
        target: ${SSL_VOLUME_PATH:-/ssl}
        read_only: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      authorizer:
        condition: service_started
  ### START section - kafka and related ##
  kafka:
    image: bitnami/kafka@sha256:a3c3e145cd2611ce3dfe555695326db45166732d17114b8ddba585f2a1e494f5
    restart: always
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "/bitnami/kafka/healthcheck.sh"]
      interval: 10s
      timeout: 3s
      retries: 2
      start_period: 45s
  init-kafka:
    image: ghcr.io/kneu-messenger-pigeon/init-kafka@sha256:d477026a46a3b7b87c46ebba8caa8ea84f9279eaee51d78387f71cc2eae7d45a
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_HOST=kafka:9092
      - CREATE_HEALTHCHECK_SCRIPT=/bitnami/kafka/healthcheck.sh
      - START_TIMEOUT=4s
      # must be greater then services.kafka.healthcheck.interval (don't exit container until healthcheck done for Kafka service)
      - FINISH_TIMEOUT=0s
    restart: on-failure
    depends_on:
      kafka:
        condition: service_started
  kafka-ui:
    image: provectuslabs/kafka-ui@sha256:477d4c3d896a0deefdcccf0e08e8fb0d4258e5340d34f3c3513f75073de5835c
    ports:
      - "${LISTEN_KAFKA_UI:-127.0.0.1:8892}:8080"
    networks:
      - pigeon
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "8080"]
      interval: 15s
      timeout: 5s
      retries: 3
  ### END section - kafka and related ##

  ### START Pigeon microservices ###
  secondary-db-watcher:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-watcher@sha256:0f3e5535c16075241709468ff4409ad613b4ddee2204b170de606c3df9280bba
    restart: always
    volumes:
      - "secondary-db-watcher-storage:/storage"
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PAUSE_AFTER_SUCCESS=600
      - PAUSE_AFTER_ERROR=60
      - ERROR_COUNT_TO_BREAK=3
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### START section - secondary db importer ###
  secondary-db-disciplines-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-disciplines-importer@sha256:efe87966321beae01e7abefc9d47b2a4e95bff56acba1af0ab1c403efa9f7392
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-lessons-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-lessons-importer@sha256:355fdea09d1a2a149b724a9826b470fb3f002a5fdbac8f903f8cc6ceb0376ead
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-scores-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-scores-importer@sha256:c72d9da454343f1d1aa1421bcfdb292ccf2748cd23e7778433c53f763df318c2
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### END section - secondary db importer ###

  ## Fake line to catch by `build-combined-readme.sh` and put into README.md Microservices
  ## image: ghcr.io/kneu-messenger-pigeon/realtime-changes-event-sender:main
  realtime-importer:
    image: ghcr.io/kneu-messenger-pigeon/realtime-importer@sha256:3a5d3bdd97b47ee32b69a7a2c6a3a3fa901705a309f3c7ede43458dabbad9900
    restart: always
    networks:
      - pigeon
    volumes:
      - "realtime-importer-storage:/storage"
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PRIMARY_DEKANAT_DB_DSN=${PRIMARY_DEKANAT_DB_DSN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SQS_QUEUE_URL=${AWS_SQS_QUEUE_URL}
      - AWS_REGION=${AWS_REGION}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - score storage ###
  score-storage-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - score-storage-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  score-storage-writer:
    image: ghcr.io/kneu-messenger-pigeon/storage-writer@sha256:0b9311e7dbecd8d16722992095d2f10cd9e0ed2d49687404781a43fbddb48562
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://score-storage-redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      score-storage-redis:
        condition: service_healthy
  score-storage-api:
    image: ghcr.io/kneu-messenger-pigeon/score-storage-api@sha256:cf96c892d8711918ad6eeb6e65cc3c47510f8a0225b6b135659dc3f6b5876564
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - REDIS_DSN=redis://score-storage-redis:6379
      - LISTEN=:80
    depends_on:
      score-storage-redis:
        condition: service_healthy
  ### END section - score storage ###

  authorizer:
    image: ghcr.io/kneu-messenger-pigeon/authorizer@sha256:8553fec044ba39ba195eeec0e40cba9484f5ae83bae6c06fcd01032005ae45ff
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - LISTEN=:80
      - AUTHORIZER_PUBLIC_URL=${PUBLIC_URL}/authorizer
      - KNEU_CLIENT_ID=${KNEU_CLIENT_ID}
      - KNEU_CLIENT_SECRET=${KNEU_CLIENT_SECRET}
      - APP_SECRET=${APP_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - telegram app ###
  telegram-app-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - telegram-app-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  telegram-app:
    image: ghcr.io/kneu-messenger-pigeon/telegram-app@sha256:002e4a2bd08f37d3c87bb0a59ffa2d1c419357429a4e788cbc6e9071f47ca505
    restart: always
    networks:
      - pigeon
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://telegram-app-redis:6379
      - SCORE_STORAGE_API_HOST=http://score-storage-api
      - AUTHORIZER_HOST=http://authorizer
      - COMMIT_THRESHOLD=1000
      - APP_SECRET=${APP_SECRET}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES=${TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES}
      - WAITING_FOR_ANOTHER_SCORE_TIME=${WAITING_FOR_ANOTHER_SCORE_TIME}
    depends_on:
      kafka:
        condition: service_healthy
      telegram-app-redis:
        condition: service_healthy
  ### END section - telegram app ###

  healthcheck-pinger:
    image: ghcr.io/kneu-messenger-pigeon/healthcheck-pinger@sha256:29b9021c2c45f1f73c06d0a5746271494e237646257ecff2970530e4cd221f51
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - HEALTHCHECK_PING_URL=${HEALTHCHECK_PING_URL}
      - INTERVAL=60
      - IGNORE_SERVICES=init-kafka
    depends_on:
      gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
      authorizer:
        condition: service_healthy
        ### END Pigeon microservices ###
volumes:
  kafka_data:
    driver: local
  secondary-db-watcher-storage:
    driver: local
  realtime-importer-storage:
    driver: local
  score-storage-redis:
    driver: local
  telegram-app-redis:
    driver: local
networks:
  pigeon:
    driver: bridge
# image digest for integration testing
# ghcr.io/kneu-messenger-pigeon/dekanat-db-mock@sha256:dcef35f50cc655ce7a6be1737fea5b9e0e470f2ed62f9e528067900ab96158e1
# ghcr.io/kneu-messenger-pigeon/integration-testing@sha256:9fbad6746fc8fef416fcbb2ae0b11f7ca32cdf24f42e658ce7d58510dee1519f
