services:
  # common nginx-gateway to have single public https-entrypoint for all services
  gateway:
    image: ghcr.io/kneu-messenger-pigeon/gateway@sha256:879bed409f0431cbb9f2fcb0fd66ed8326160598bffcc39e2cce12153583f412
    restart: always
    networks:
      - pigeon
    ports:
      - "${LISTEN_HTTP:-28080}:80"
      - "${LISTEN_HTTPS:-28443}:443"
    environment:
      - SSL_FOLDER
    volumes:
      - type: bind
        source: ${SSL_VOLUME_PATH:-./ssl}
        target: ${SSL_VOLUME_PATH:-/ssl}
        read_only: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      authorizer:
        condition: service_started
  ### START section - kafka and related ##
  kafka:
    image: bitnami/kafka@sha256:fb4bc691dcb732e0944a8eb2af278fecf2628bbff8a73dbb9e508c917619e588
    restart: always
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "/bitnami/kafka/healthcheck.sh"]
      interval: 10s
      timeout: 3s
      retries: 2
      start_period: 45s
  init-kafka:
    image: ghcr.io/kneu-messenger-pigeon/init-kafka@sha256:e512c55a3c06702e168bf7d95b88fce81ecef2a7427f898e2f5a92a9e7665c13
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_HOST=kafka:9092
      - CREATE_HEALTHCHECK_SCRIPT=/bitnami/kafka/healthcheck.sh
      - START_TIMEOUT=4s
      # must be greater then services.kafka.healthcheck.interval (don't exit container until healthcheck done for Kafka service)
      - FINISH_TIMEOUT=0s
    restart: on-failure
    depends_on:
      kafka:
        condition: service_started
  kafka-ui:
    image: provectuslabs/kafka-ui@sha256:8f2ff02d64b0a7a2b71b6b3b3148b85f66d00ec20ad40c30bdcd415d46d31818
    ports:
      - "${LISTEN_KAFKA_UI:-127.0.0.1:8892}:8080"
    networks:
      - pigeon
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "8080"]
      interval: 15s
      timeout: 5s
      retries: 3
  ### END section - kafka and related ##

  ### START Pigeon microservices ###
  secondary-db-watcher:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-watcher@sha256:edea0f19c8fd7bbc5d0f3d5600fd96f09681fd72006e07dab08b54c11465e2cc
    restart: always
    volumes:
      - "secondary-db-watcher-storage:/storage"
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PAUSE_AFTER_SUCCESS=600
      - PAUSE_AFTER_ERROR=60
      - ERROR_COUNT_TO_BREAK=3
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### START section - secondary db importer ###
  secondary-db-disciplines-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-disciplines-importer@sha256:536f64a568e9d9d75705f6dc1f7cbdccfb4c8d24d133d267e8396ea6d6d5bdd0
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-lessons-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-lessons-importer@sha256:e7999ebd07c63c35ef334462481b205d649244c30f8c2658626382126c7d9744
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-scores-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-scores-importer@sha256:1c8dd8c48085cc92d45fd5f8dba0af642100d7b10b4ff7a368647342fd1f1ca2
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### END section - secondary db importer ###

  ## Fake line to catch by `build-combined-readme.sh` and put into README.md Microservices
  ## image: ghcr.io/kneu-messenger-pigeon/realtime-capture:main
  realtime-importer:
    image: ghcr.io/kneu-messenger-pigeon/realtime-importer@sha256:d83bf7bbf7f227cc04749e3e593ff3c986dde20cde7967b535984ba816c71d90
    restart: always
    networks:
      - pigeon
    volumes:
      - "realtime-importer-storage:/storage"
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PRIMARY_DEKANAT_DB_DSN=${PRIMARY_DEKANAT_DB_DSN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SQS_QUEUE_URL=${AWS_SQS_QUEUE_URL}
      - AWS_REGION=${AWS_REGION}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - score storage ###
  score-storage-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - score-storage-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  score-storage-writer:
    image: ghcr.io/kneu-messenger-pigeon/storage-writer@sha256:1841d40833b9809affa4c92f6ae51b3994357a31a461a533ba3e31dfa9c24d07
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://score-storage-redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      score-storage-redis:
        condition: service_healthy
  score-storage-api:
    image: ghcr.io/kneu-messenger-pigeon/score-storage-api@sha256:457b34c9b5315d7635c56aefbdb692032ea9b6f0b9399ef248ba552780481f8c
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - REDIS_DSN=redis://score-storage-redis:6379
      - LISTEN=:80
    depends_on:
      score-storage-redis:
        condition: service_healthy
  ### END section - score storage ###

  authorizer:
    image: ghcr.io/kneu-messenger-pigeon/authorizer@sha256:d45d08beb3036b7cde4bf96f8b9d0b6a48895ff9b67c4fff2c1f9c1ffafb8d77
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - LISTEN=:80
      - AUTHORIZER_PUBLIC_URL=${PUBLIC_URL}/authorizer
      - KNEU_CLIENT_ID=${KNEU_CLIENT_ID}
      - KNEU_CLIENT_SECRET=${KNEU_CLIENT_SECRET}
      - APP_SECRET=${APP_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AUTH_STATE_LIFETIME=${AUTH_STATE_LIFETIME}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - telegram app ###
  telegram-app-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - telegram-app-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  telegram-app:
    image: ghcr.io/kneu-messenger-pigeon/telegram-app@sha256:8631ed405fe71738167a9b27a6742555e69db5aa656082fe793884093a3490aa
    restart: always
    networks:
      - pigeon
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://telegram-app-redis:6379
      - SCORE_STORAGE_API_HOST=http://score-storage-api
      - AUTHORIZER_HOST=http://authorizer
      - COMMIT_THRESHOLD=1000
      - APP_SECRET=${APP_SECRET}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES=${TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES}
      - WAITING_FOR_ANOTHER_SCORE_TIME=${WAITING_FOR_ANOTHER_SCORE_TIME}
    depends_on:
      kafka:
        condition: service_healthy
      telegram-app-redis:
        condition: service_healthy
  ### END section - telegram app ###

  ### END Pigeon microservices ###

  ### START section - utilities ###
  victoria-metrics:
    image: victoriametrics/victoria-metrics@sha256:4d7f1b98e9a73431a0c4ff156bf86fdf23679fc7cc06a4b3cbb042e5d03c101c
    restart: always
    networks:
      - pigeon
    volumes:
      - victoria-metrics-data:/victoria-metrics-data
    ports:
      - "${VICTORIA_METRICS_PORT:-127.0.0.1:8428}:8428"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=3", "--spider", "http://127.0.0.1:8428/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 2
      start_period: 5s
  healthcheck-pinger:
    image: ghcr.io/kneu-messenger-pigeon/healthcheck-pinger@sha256:07ea88dbb128bb81ccf186d533e9b7cb0e2cd9d1cfff3b438b8b4bb0181ce43e
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - HEALTHCHECK_PING_URL=${HEALTHCHECK_PING_URL}
      - INTERVAL=60
      - IGNORE_SERVICES=init-kafka
      - ERROR_THRESHOLD=2
    depends_on:
      gateway:
        condition: service_healthy
      kafka:
        condition: service_healthy
      authorizer:
        condition: service_healthy
  rclone:
    image: rclone/rclone@sha256:696c31597e05c443de736f42e11914bb8327dcbb4f3c24efe1dc0d596f9b841f
    restart: always
    volumes:
      - type: volume
        source: telegram-app-redis
        target: /data/telegram-app-redis
        read_only: true
      - type: volume
        source: score-storage-redis
        target: /data/score-storage-redis
        read_only: true
    environment:
      RCLONE_CONFIG_GDRIVE_TYPE: drive
      RCLONE_CONFIG_GDRIVE_SCOPE: drive
      RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE: /account.json
      RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE_CONTENTS: ${RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE_CONTENTS}
      RCLONE_CONFIG_GDRIVE_CLIENT_ID: ${RCLONE_CONFIG_GDRIVE_CLIENT_ID}
      RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID: ${RCLONE_CONFIG_GDRIVE_ROOT_FOLDER_ID}
    stop_signal: SIGKILL
    entrypoint: ["sh", "-c"]
    command:
      - |
        echo "$${RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE_CONTENTS}" > "$${RCLONE_CONFIG_GDRIVE_SERVICE_ACCOUNT_FILE}";
        while true; do
          rclone copy -v . gdrive:
          wget --no-verbose --tries=3 --spider "${HEALTHCHECK_BACKUP_PING_URL}/$?"
          sleep 12h
        done
      ### END section - utilities ###
volumes:
  kafka_data:
    driver: local
  secondary-db-watcher-storage:
    driver: local
  realtime-importer-storage:
    driver: local
  score-storage-redis:
    driver: local
  telegram-app-redis:
    driver: local
  victoria-metrics-data:
    driver: local
networks:
  pigeon:
    driver: bridge
# image digest for integration testing
# ghcr.io/kneu-messenger-pigeon/dekanat-db-mock@sha256:0df501f4ddebecbf23ff9f869b6f6cac9fa09b616c6dd9cba5c9410846595ee1
# ghcr.io/kneu-messenger-pigeon/integration-testing@sha256:7bf93981df8bf57d727b9d3d6fffacfdf54c24566c6c4e23bc1e46a38507fe3d
