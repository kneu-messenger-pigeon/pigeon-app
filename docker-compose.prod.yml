version: "3.9"
services:
  ### START section - kafka and related ##
  kafka:
    image: bitnami/kafka@sha256:4c0bed38a07275226a3a3e61d0435a866c8882e7a32168c19e09c168e3bda835
    restart: always
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "/bitnami/kafka/healthcheck.sh"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 65s
  init-kafka:
    image: ghcr.io/kneu-messenger-pigeon/init-kafka@sha256:7b68a21498fec12040d841d5ed883d753a0e760c8c0adaa88393563bd846a649
    networks:
      - pigeon
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_HOST=kafka:9092
      - CREATE_HEALTHCHECK_SCRIPT=/bitnami/kafka/healthcheck.sh
      - START_TIMEOUT=4s
      # must be greater then services.kafka.healthcheck.interval (don't exit container until healthcheck done for Kafka service)
      - FINISH_TIMEOUT=20s
    restart: on-failure
    depends_on:
      kafka:
        condition: service_started
  kafka-ui:
    image: provectuslabs/kafka-ui@sha256:477d4c3d896a0deefdcccf0e08e8fb0d4258e5340d34f3c3513f75073de5835c
    ports:
      - "8892:8080"
    networks:
      - pigeon
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "8080"]
      interval: 15s
      timeout: 5s
      retries: 3
  ### END section - kafka and related ##

  secondary-db-watcher:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-watcher@sha256:b3084d4b5ceee43b1292d8e03b3fc9ee68ac8cec88989fdc6b7421350ffc4409
    restart: always
    volumes:
      - "secondary-db-watcher-storage:/storage"
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PAUSE_AFTER_SUCCESS=600
      - PAUSE_AFTER_ERROR=60
      - ERROR_COUNT_TO_BREAK=3
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### START section - secondary db importer ###
  secondary-db-disciplines-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-disciplines-importer@sha256:1fa799a1b7716f6f06238b8e26d88202829f3a128b356b8d7095d04369686692
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-lessons-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-lessons-importer@sha256:3c8e1ca0a9ec01443f5fb1dd8736d7d1efa1618f72510f54b3727ee23672e5b9
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  secondary-db-scores-importer:
    image: ghcr.io/kneu-messenger-pigeon/secondary-db-scores-importer@sha256:e9957afeedb9f2f03f9f066a9d51625c26af0aea1c88c0e3319ff4838146a0e9
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - SECONDARY_DEKANAT_DB_DSN=${SECONDARY_DEKANAT_DB_DSN}
    depends_on:
      kafka:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ### END section - secondary db importer ###

  ## Fake line to catch by `build-combined-readme.sh` and put into README.md Microservices
  ## image: ghcr.io/kneu-messenger-pigeon/realtime-changes-event-sender:main
  realtime-importer:
    image: ghcr.io/kneu-messenger-pigeon/realtime-importer@sha256:b8999fe1f5e134bc27032d58429708f6a82daddee3f38dcd0ff0ca98ed6ca5b9
    restart: always
    networks:
      - pigeon
    volumes:
      - "realtime-importer-storage:/storage"
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - PRIMARY_DEKANAT_DB_DSN=${PRIMARY_DEKANAT_DB_DSN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SQS_QUEUE_URL=${AWS_SQS_QUEUE_URL}
      - AWS_REGION=${AWS_REGION}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - score storage ###
  score-storage-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - score-storage-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  storage-writer:
    image: ghcr.io/kneu-messenger-pigeon/storage-writer@sha256:67cbaa5fb48f9160934bb039309bb728a83d80db7a985f9f0b57a9cd3bf81f40
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://score-storage-redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      score-storage-redis:
        condition: service_healthy
  score-storage-api:
    image: ghcr.io/kneu-messenger-pigeon/score-storage-api@sha256:4338f141f732ee5a56a2aaf45823b283822c38ecd24022630948b97671c4f415
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - REDIS_DSN=redis://score-storage-redis:6379
      - LISTEN=:80
    depends_on:
      score-storage-redis:
        condition: service_healthy
  ### END section - score storage ###

  authorizer:
    image: ghcr.io/kneu-messenger-pigeon/authorizer@sha256:ec631bfc2e7a1ce053afa26bbb9d7b1f2540ef590168f6ef79e0fa8c6cf81d2c
    restart: always
    ports:
      - "8890:8890"
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - LISTEN=:8890
      - AUTHORIZER_PUBLIC_URL=${AUTHORIZER_PUBLIC_URL}
      - KNEU_CLIENT_ID=${KNEU_CLIENT_ID}
      - KNEU_CLIENT_SECRET=${KNEU_CLIENT_SECRET}
      - APP_SECRET=${APP_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      kafka:
        condition: service_healthy
  ### START section - telegram app ###
  telegram-app-redis:
    image: redis@sha256:121bac949fb5f623b9fa0b4e4c9fb358ffd045966e754cfa3eb9963f3af2fe3b
    restart: always
    volumes:
      - telegram-app-redis:/data
    networks:
      - pigeon
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
  telegram-app:
    image: ghcr.io/kneu-messenger-pigeon/telegram-app@sha256:473f8202df98c3c670e0f005ebaf6b2d9bb27dbfc8c2659095a8f536349c3224
    restart: always
    networks:
      - pigeon
    environment:
      #      - INFISICAL_TOKEN=$INFISICAL_TOKEN
      - KAFKA_HOST=kafka:9092
      - REDIS_DSN=redis://telegram-app-redis:6379
      - SCORE_STORAGE_API_HOST=http://score-storage-api
      - AUTHORIZER_HOST=http://authorizer:8890
      - COMMIT_THRESHOLD=1000
      - APP_SECRET=${APP_SECRET}
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES=${TIMEFRAME_TO_COMBINE_REPEAT_SCORE_CHANGES}
    depends_on:
      kafka:
        condition: service_healthy
      telegram-app-redis:
        condition: service_healthy
  ### END section - telegram app ###

  healthcheck-ping:
    image: ghcr.io/kneu-messenger-pigeon/healthcheck-pinger@sha256:caee4b5ea13b896f7dcabe8802b380152191f66e8c067fe4c6330b3b79512d2d
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - HEALTHCHECK_PING_URL=${HEALTHCHECK_PING_URL}
      - INTERVAL=60
      - IGNORE_SERVICES=init-kafka
    depends_on:
      kafka:
        condition: service_healthy
      authorizer:
        condition: service_healthy
volumes:
  kafka_data:
    driver: local
  secondary-db-watcher-storage:
    driver: local
  realtime-importer-storage:
    driver: local
  score-storage-redis:
    driver: local
  telegram-app-redis:
    driver: local
networks:
  pigeon:
    driver: bridge
