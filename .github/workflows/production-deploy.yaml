name: Deploy production

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      OVPN_CLIENT_KEY:
        required: true
      SSH_KEY:
        required: true
      INFISICAL_TOKEN_PRODUCTION:
        required: true
      CONTAINER_REGISTRY_READ_TOKEN:
        required: true

concurrency:
  group: remote-server-with-openvpn-connection
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy production
    runs-on: ubuntu-latest
    env:
      COMPOSE_URL: https://${{ github.token }}@raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.prod.yml
    steps:
      - uses: frenck/action-setup-yq@v1
      - name: Get authorizer port
        id: authorizer-port
        run: |
          AUTHORIZER_PORT=$(curl --fail -s  ${{ env.COMPOSE_URL }} | yq -e '.services.authorizer.ports[0]')
          echo "PORT=$(cut -d':' -f2 <<< $AUTHORIZER_PORT)" >> $GITHUB_OUTPUT
      - uses: awalsh128/cache-apt-pkgs-action@v1.3.0
        with:
          packages: openvpn openvpn-systemd-resolved
          version: 1.0
      - name: Write OVPN config
        run: printf "${{ vars.OVPN_CONFIG }}" > .openvpn-client.ovpn
      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: .openvpn-client.ovpn
          client_key: ${{ secrets.OVPN_CLIENT_KEY }}
      - name: Execute deploy on production server
        uses: appleboy/ssh-action@v0.1.10
        env:
          COMPOSE_URL: ${{ env.COMPOSE_URL }}
          INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN_PRODUCTION }}
          INFISICAL_DISABLE_UPDATE_CHECK: true
          WORKDIR: ${{ vars.REMOTE_PROD_DIR }}
          DOCKER_USER: ${{ github.repository_owner }}
          DOCKER_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_READ_TOKEN }}
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: COMPOSE_URL,INFISICAL_TOKEN,WORKDIR,DOCKER_USER,DOCKER_PASSWORD
          script_stop: true
          script: |
            which docker
            which infisical
            grep '"ghcr.io"' ~/.docker/config.json > /dev/null || echo $DOCKER_PASSWORD | docker login ghcr.io -u "$DOCKER_USER" --password-stdin
            mkdir -p "$WORKDIR" && cd "$WORKDIR"
            [ -f docker-compose.yml ] && docker compose down || true
            curl --fail -s $COMPOSE_URL > docker-compose.yml
            docker compose pull --quiet
            docker compose build --quiet
            docker compose down
            infisical run --env=prod -- docker compose up -d

            sleep 5
            PORT=$(docker compose port authorizer ${{ steps.authorizer-port.outputs.PORT }})
            curl --fail -s  http://"${PORT:-unknown}"/healthcheck
